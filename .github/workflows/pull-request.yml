name: "Pull Request Test"

on:
  pull_request:
    branches: [ "main" ]

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
      - name: Use cache for local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-pull-${{ hashFiles('~/.m2/repository') }}
          restore-keys: |
            ${{ runner.os }}-m2-pull-
      - name: Use cache for node
        uses: actions/cache@v4
        with:
          path: frontend/node
          key: ${{ runner.os }}-node-pull-${{ hashFiles('~/.m2/frontend/node') }}
          restore-keys: |
            ${{ runner.os }}-node-pull-
      - name: Use cache for node_modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node_modules-pull-{{ hashFiles('~/.m2/frontend/node_modules') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-pull-
      - name: Compile the webapp
        run: ./mvnw --batch-mode --update-snapshots clean compile --file pom.xml

  test:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
      - name: Use cache for local Maven repository
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-pull-
      - name: Use cache for node
        uses: actions/cache/restore@v4
        with:
          path: frontend/node
          key: ${{ runner.os }}-node-pull-
      - name: Use cache for node_modules
        uses: actions/cache/restore@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node_modules-verify
      - name: Verify the webapp
        run: ./mvnw --batch-mode test --file pom.xml

  package:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
      - name: Use cache for local Maven repository
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-pull-
      - name: Use cache for node
        uses: actions/cache/restore@v4
        with:
          path: frontend/node
          key: ${{ runner.os }}-node-pull-
      - name: Use cache for node_modules
        uses: actions/cache/restore@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node_modules-verify
      - name: Package the webapp
        run:  ./mvnw --batch-mode -DskipTests=true package --file pom.xml
      - name: Check if frontend is bundled into jar
        run: |
          if [[ -d /home/runner/work/glacier/glacier/target/classes/static ]]; then
            echo "angular packaged to jar"
          else
            echo "angular not correctly packaged!"
            ls -lah /home/runner/work/glacier/glacier/target/classes
            exit 1
          fi
      - name: Copy jar
        run: cp /home/runner/work/glacier/glacier/target/glacier-*.jar glacier.jar
      - name: Archive glacier jar
        uses: actions/upload-artifact@v4
        with:
          name: glacier
          path: glacier.jar
          retention-days: 1
      - name: Update dependency graph
        uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

  create-test-image:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: glacier
          path: containerimage
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/seism0saurus/glacier
          tags: |
            type=sha
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: containerimage/.
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  e2e:
    runs-on: ubuntu-latest
    needs: create-test-image
    env:
      BASE_URL: http://localhost:8080
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
      - name: Use cache for local Maven repository
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-pull-
      - name: Use cache for node
        uses: actions/cache/restore@v4
        with:
          path: frontend/node
          key: ${{ runner.os }}-node-pull-
      - name: Use cache for node_modules
        uses: actions/cache/restore@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node_modules-verify
      - name: Use cache for apt
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-pull-{{ hashFiles('/var/cache/apt/archives') }}
          restore-keys: |
            ${{ runner.os }}-apt-pull-
      - name: Use cache for ms-playwright
        uses: actions/cache@v4
        with:
          path: /home/runner/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-pull-{{ hashFiles('/home/runner/.cache/ms-playwright') }}
          restore-keys: |
            ${{ runner.os }}-playwright-pull-
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      - name: Configure needed services in Docker Compose
        run: |
          cat <<EOF > docker-compose.yml
          version: '3.9'
          services:
            glacier:
              image: ghcr.io/seism0saurus/glacier:pr-${{ github.event.number }}
              ports:
                - 8080:8080
              environment:
                SPRING_PROFILES_ACTIVE: "default"
                ACCESS_KEY: "${{ secrets.E2E_MASTODON_KEY }}"
                HANDLE: "${{ vars.E2E_MASTODON_HANDLE }}"
                INSTANCE: "${{ secrets.E2E_MASTODON_INSTANCE }}"
                MY_DOMAIN: "localhost:8080"
                MY_WEBSITE: "seism0saurus.de"
                MY_NAME: "seism0saurus"
                MY_STREET_AND_NUMBER: "sometherestreet 1"
                MY_ZIP_CODE: "123456"
                MY_CITY: "somecity"
                MY_COUNTRY: "Germany"
                MY_MAIL: "kontakt@seism0saurus.de"
                MY_PHONE: "+1234567890"
              container_name: glacier
          EOF
      - name: Start services using Docker Compose
        run: docker-compose up -d
      - name: Wait for service
        run : |
          for i in {1..30}; do
            if curl -s http://localhost:8080 > /dev/null; then
              echo "glacier is up and running!"
              exit 0
            fi
            echo "Waiting for glacier to start..."
            sleep 2
          done
          echo "glacier failed to start in time."
          docker ps
          docker logs glacier
          exit 1
      - name: Start playwright tests in maven
        run:  ./mvnw --batch-mode verify jacoco:report --file pom.xml -P ci
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report
      - name: Upload Playwright screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-screenshots
          path: frontend/test-results/screenshots
      - name: Upload Surefire results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-results
          path: target/surefire-reports
      - name: Upload Jacoco reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-reports
          path: target/site/jacoco
      - name: Upload Jasmin reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jasmin-reports
          path: frontend/coverage/glacier-frontend

  backend-coverage-comment:
    runs-on: ubuntu-latest
    needs: e2e
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: jacoco-reports
      - name: Add coverage to GitHub
        id: jacoco
        if: always()
        uses: madrapps/jacoco-report@v1.7.1
        with:
          paths: |
            ${{ github.workspace }}/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 45
          min-coverage-changed-files: 60

  frontend-coverage-comment:
    runs-on: ubuntu-latest
    needs: e2e
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          name: jasmin-reports
      - name: Report NYC coverage
        uses: sidx1024/report-nyc-coverage-github-action@v1.2.7
        if: always()
        with:
          coverage_file: frontend/coverage/glacier-frontend/coverage.json
          sources_base_path: frontend
