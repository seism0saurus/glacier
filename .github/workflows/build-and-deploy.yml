name: "Build and deploy"

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
    types: [ "closed" ]

jobs:
  compile:
    if: >
      github.event_name != 'push' || !contains(github.event.head_commit.message, 'Merge pull request') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
      - name: Use cache for local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-main-${{ hashFiles('~/.m2/repository') }}
          restore-keys: |
            ${{ runner.os }}-m2-main-
      - name: Use cache for node
        uses: actions/cache@v4
        with:
          path: frontend/node
          key: ${{ runner.os }}-node-main-${{ hashFiles('~/.m2/frontend/node') }}
          restore-keys: |
            ${{ runner.os }}-node-main-
      - name: Use cache for node_modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node_modules-main-${{ hashFiles('~/.m2/frontend/node_modules') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-main-
      - name: Compile the webapp
        run: ./mvnw --batch-mode --update-snapshots clean compile --file pom.xml

  test:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
      - name: Use cache for local Maven repository
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-main-
      - name: Use cache for node
        uses: actions/cache/restore@v4
        with:
          path: frontend/node
          key: ${{ runner.os }}-node-main-
      - name: Use cache for node_modules
        uses: actions/cache/restore@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node_modules-verify
      - name: Verify the webapp
        run: ./mvnw --batch-mode verify --file pom.xml
      - name: Upload Surefire results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-results
          path: target/surefire-reports
      - name: Upload Jacoco reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-reports
          path: target/site/jacoco
      - name: Upload Jasmin reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jasmin-reports
          path: frontend/coverage/glacier-frontend

  package:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
      - name: Use cache for local Maven repository
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-main-
      - name: Use cache for node
        uses: actions/cache/restore@v4
        with:
          path: frontend/node
          key: ${{ runner.os }}-node-main-
      - name: Use cache for node_modules
        uses: actions/cache/restore@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node_modules-main-
      - name: Package the webapp
        run:  ./mvnw --batch-mode -DskipTests=true package --file pom.xml -P "SkipUnitTest"
      - name: Check if frontend is bundled into jar
        run: |
          if [[ -d /home/runner/work/glacier/glacier/target/classes/static ]]; then
            echo "angular packaged to jar"
          else
            echo "angular not correctly packaged!"
            ls -lah /home/runner/work/glacier/glacier/target/classes
            exit 1
          fi
      - name: Copy jar
        run: cp /home/runner/work/glacier/glacier/target/glacier-*.jar glacier.jar
      - name: Archive glacier jar
        uses: actions/upload-artifact@v4
        with:
          name: glacier
          path: glacier.jar
          retention-days: 1
      - name: Update dependency graph
        uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

  e2e:
    runs-on: ubuntu-latest
    needs: package
    env:
      GLACIER_IMAGE_TAG: "${{ github.ref_name }}"
      REPOSITORY: "/home/runner/work/glacier/glacier/"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: glacier
          path: infrastructure/glacier
      - name: Use cache for node_modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node_modules-main-${{ hashFiles('~/.m2/frontend/node_modules') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-main-
      - name: Use cache for ms-playwright
        uses: actions/cache@v4
        with:
          path: /home/runner/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-main-${{ hashFiles('~/.cache/ms-playwright') }}
          restore-keys: |
            ${{ runner.os }}-playwright-main-
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      - name: Build image
        working-directory: infrastructure
        run: |
          docker compose -f docker-compose.yaml build
          docker save ghcr.io/seism0saurus/glacier:${GLACIER_IMAGE_TAG} -o glacier-image.tar
      - name: Upload image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: glacier-image
          path: infrastructure/glacier-image.tar
      - name: Start e2e test inside docker-compose
        working-directory: infrastructure
        run: |
          echo "to update data in infrastructure-content.tar.gz run 'sudo tar -czf infrastructure-content.tar.gz mastodon mastodon.env postgres redis proxy.* v3.ext dynamic.yml traefik.yml'"
          tar -xf infrastructure-content.tar.gz -C ./
          chmod -R a+rwx mastodon
          docker compose -f docker-compose.yaml up --build --abort-on-container-exit playwright --exit-code-from playwright
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report
      - name: Upload Playwright Error screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-error-screenshots
          path: frontend/test-results
      - name: Show logs of service
        working-directory: infrastructure
        if: failure()
        run: |
          docker ps
          docker compose logs


  publish-image:
    runs-on: ubuntu-latest
    needs: e2e
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: glacier-image
          path: ./
      - name: Load image into Docker
        run: |
          docker load -i glacier-image.tar
      - name: Tag Docker Image for Pushing
        run: |
          docker tag glacier-image:latest ghcr.io/seism0saurus/glacier:${{ github.ref_name }}
          docker tag glacier-image:latest ghcr.io/seism0saurus/glacier:main
          docker tag glacier-image:latest ghcr.io/seism0saurus/glacier:latest
      - name: Push Docker Image to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker push ghcr.io/seism0saurus/glacier:${{ github.ref_name }}
          docker push ghcr.io/seism0saurus/glacier:main
          docker push ghcr.io/seism0saurus/glacier:latest

  deploy:
    runs-on: ubuntu-latest
    needs: publish-image
    environment: glacier.seism0saurus.de
    steps:
      - name: Prepare ssh
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS }}
        run: |
          echo "${SSH_KEY}" > ssh.key
          chmod 600 ssh.key
          mkdir ~/.ssh
          echo "${KNOWN_HOSTS}" > ~/.ssh/known_hosts
      - name: Restart docker-compose
        env:
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ vars.SSH_HOST }}
        run: ssh -i ssh.key -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST} -C "sudo /usr/local/bin/upgrade-glacier.sh"