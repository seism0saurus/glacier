name: "Push Test"

on:
  push:
    branches: ["*.*.*"]

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
      - name: Use cache for local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-verify-${{ hashFiles('~/.m2/repository') }}
          restore-keys: |
            ${{ runner.os }}-m2-verify-
      - name: Use cache for node
        uses: actions/cache@v4
        with:
          path: frontend/node
          key: ${{ runner.os }}-node-verify-${{ hashFiles('~/.m2/frontend/node') }}
          restore-keys: |
            ${{ runner.os }}-node-verify-
      - name: Use cache for node_modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node_modules-verify-{{ hashFiles('~/.m2/frontend/node_modules') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-verify-
      - name: Compile the webapp
        run: ./mvnw --batch-mode --update-snapshots clean compile --file pom.xml

  test:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
      - name: Use cache for local Maven repository
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-verify-
      - name: Use cache for node
        uses: actions/cache/restore@v4
        with:
          path: frontend/node
          key: ${{ runner.os }}-node-verify-
      - name: Use cache for node_modules
        uses: actions/cache/restore@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node_modules-verify
      - name: Verify the webapp
        run: ./mvnw --batch-mode verify --file pom.xml
      - name: Upload Surefire results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-results
          path: target/surefire-reports
      - name: Upload Jacoco reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-reports
          path: target/site/jacoco
      - name: Upload Jasmin reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jasmin-reports
          path: frontend/coverage/glacier-frontend

  package:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
      - name: Use cache for local Maven repository
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-verify-
      - name: Use cache for node
        uses: actions/cache/restore@v4
        with:
          path: frontend/node
          key: ${{ runner.os }}-node-verify-
      - name: Use cache for node_modules
        uses: actions/cache/restore@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node_modules-verify
      - name: Package the webapp
        run:  ./mvnw --batch-mode -DskipTests=true package --file pom.xml -P "SkipUnitTest"
      - name: Check if frontend is bundled into jar
        run: |
          if [[ -d /home/runner/work/glacier/glacier/target/classes/static ]]; then
            echo "angular packaged to jar"
          else
            echo "angular not correctly packaged!"
            ls -lah /home/runner/work/glacier/glacier/target/classes
            exit 1
          fi
      - name: Copy jar
        run: cp /home/runner/work/glacier/glacier/target/glacier-*.jar glacier.jar
      - name: Archive glacier jar
        uses: actions/upload-artifact@v4
        with:
          name: glacier
          path: glacier.jar
          retention-days: 1
      - name: Update dependency graph
        uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

  create-test-image:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: glacier
          path: containerimage
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/seism0saurus/glacier
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Get Git commit timestamps
        run: echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV
      - name: Build and container image
        uses: docker/build-push-action@v6
        with:
          context: containerimage/.
          push: 'false'
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
        env:
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}
      - name: Export container image as tar
        run: docker save -o ${{ runner.temp }}/glacier.tar ghcr.io/seism0saurus/glacier:${{ github.ref_name }}
      - name: Upload containerimage
        uses: actions/upload-artifact@v4
        with:
          name: containerimage
          path: ${{ runner.temp }}/glacier.tar

  e2e:
    runs-on: ubuntu-latest
    needs: create-test-image
    env:
      BASE_URL: http://localhost:8080
      WAIT_FOR: 15000
      MASTODON_USER_ACCESS_TOKEN: "${{ secrets.MASTODON_USER_ACCESS_TOKEN }}"
      MASTODON_USER_API_URL: "${{ secrets.MASTODON_USER_API_URL }}"
      GLACIER_IMAGE_TAG: "${{ github.ref_name }}"
      TRUST_ALL_CERTS: true
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
      - name: Use cache for local Maven repository
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-verify-
      - name: Use cache for node
        uses: actions/cache/restore@v4
        with:
          path: frontend/node
          key: ${{ runner.os }}-node-verify-
      - name: Use cache for node_modules
        uses: actions/cache/restore@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node_modules-verify
      - name: Use cache for ms-playwright
        uses: actions/cache@v4
        with:
          path: /home/runner/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-verify-{{ hashFiles('/home/runner/.cache/ms-playwright') }}
          restore-keys: |
            ${{ runner.os }}-playwright-verify-
      - name: Download containerimage
        uses: actions/download-artifact@v4
        with:
          name: containerimage
          path: ${{ runner.temp }}
      - name: Load containerimage
        run: |
          docker load --input ${{ runner.temp }}/glacier.tar
          docker image ls -a
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      - name: Start services using Docker Compose
        run: |
          cd e2e-infrastructure
          tar -xf e2e-infrastructure-content.tar.gz -C ./
          ls -lah
          docker-compose up -d
          cd ../
      - name: Wait for glacier
        run : |
          for i in {1..60}; do
            if curl -s http://localhost:8080 > /dev/null; then
              echo "glacier is up and running!"
              exit 0
            fi
            echo "Waiting for glacier to start..."
            sleep 2
          done
          echo "glacier failed to start in time."
          docker ps
          docker logs glacier
          exit 1
      - name: Start playwright tests in maven
        run:  ./mvnw --batch-mode verify jacoco:report --file pom.xml -P "WithPlaywrightDeps,RunE2ETest,SkipUnitTest,SkipIntegrationTest"
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report
      - name: Upload Playwright Error screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-error-screenshots
          path: frontend/test-results
      - name: Show logs of service
        if: failure()
        run: cd e2e-infrastructure; docker-compose logs
