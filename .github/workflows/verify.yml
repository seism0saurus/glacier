name: "Push Test"

on:
  push:
    branches: ["*.*.*"]

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
      - name: Use cache for local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-verify-${{ hashFiles('~/.m2/repository') }}
          restore-keys: |
            ${{ runner.os }}-m2-verify-
      - name: Use cache for node
        uses: actions/cache@v4
        with:
          path: frontend/node
          key: ${{ runner.os }}-node-verify-${{ hashFiles('~/.m2/frontend/node') }}
          restore-keys: |
            ${{ runner.os }}-node-verify-
      - name: Use cache for node_modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node_modules-verify-${{ hashFiles('~/.m2/frontend/node_modules') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-verify-
      - name: Compile the webapp
        run: ./mvnw --batch-mode --update-snapshots clean compile --file pom.xml

  test:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
      - name: Use cache for local Maven repository
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-verify-
      - name: Use cache for node
        uses: actions/cache/restore@v4
        with:
          path: frontend/node
          key: ${{ runner.os }}-node-verify-
      - name: Use cache for node_modules
        uses: actions/cache/restore@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node_modules-verify
      - name: Verify the webapp
        run: ./mvnw --batch-mode verify --file pom.xml
      - name: Upload Surefire results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-results
          path: target/surefire-reports
      - name: Upload Jacoco reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-reports
          path: target/site/jacoco
      - name: Upload Jasmin reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jasmin-reports
          path: frontend/coverage/glacier-frontend

  package:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
      - name: Use cache for local Maven repository
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-verify-
      - name: Use cache for node
        uses: actions/cache/restore@v4
        with:
          path: frontend/node
          key: ${{ runner.os }}-node-verify-
      - name: Use cache for node_modules
        uses: actions/cache/restore@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node_modules-verify-
      - name: Package the webapp
        run:  ./mvnw --batch-mode -DskipTests=true package --file pom.xml -P "SkipUnitTest"
      - name: Check if frontend is bundled into jar
        run: |
          if [[ -d /home/runner/work/glacier/glacier/target/classes/static ]]; then
            echo "angular packaged to jar"
          else
            echo "angular not correctly packaged!"
            ls -lah /home/runner/work/glacier/glacier/target/classes
            exit 1
          fi
      - name: Copy jar
        run: cp /home/runner/work/glacier/glacier/target/glacier-*.jar glacier.jar
      - name: Archive glacier jar
        uses: actions/upload-artifact@v4
        with:
          name: glacier
          path: glacier.jar
          retention-days: 1

  e2e:
    runs-on: ubuntu-latest
    needs: package
    env:
      GLACIER_IMAGE_TAG: "${{ github.ref_name }}"
      REPOSITORY: "/home/runner/work/glacier/glacier/"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: glacier
          path: infrastructure/glacier
      - name: Use cache for node_modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node_modules-verify-${{ hashFiles('~/.m2/frontend/node_modules') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-verify-
      - name: Use cache for ms-playwright
        uses: actions/cache@v4
        with:
          path: /home/runner/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-verify-${{ hashFiles('~/.cache/ms-playwright') }}
          restore-keys: |
            ${{ runner.os }}-playwright-verify-
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      - name: Start e2e test inside docker-compose
        working-directory: infrastructure
        run: |
          echo "to update data in infrastructure-content.tar.gz run 'sudo tar -czf infrastructure-content.tar.gz mastodon mastodon.env postgres redis proxy.* v3.ext dynamic.yml traefik.yml'"
          tar -xf infrastructure-content.tar.gz -C ./
          chmod -R a+rwx mastodon
          docker compose -f docker-compose.yaml up --build --abort-on-container-exit playwright --exit-code-from playwright
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report
      - name: Upload Playwright Error screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-error-screenshots
          path: frontend/test-results
      - name: Show logs of service
        working-directory: infrastructure
        if: failure()
        run: |
          docker ps
          docker compose logs
